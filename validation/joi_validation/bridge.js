const Joi = require("joi");


const updateBridgeSchema = Joi.object({
    bridge_id: Joi.string().alphanum().required(),
    configuration: Joi.object({
        model: Joi.string().when('service', {
            is: 'google',
            then: Joi.valid('gemini_pro'),
            otherwise: Joi.string().valid(
                'gpt-3.5-turbo', 'gpt-3.5-turbo-0613',
                'gpt-3.5-turbo-0125',
                'gpt-3.5-turbo-1106', 'gpt-3.5-turbo-16k',
                'gpt-3.5-turbo-16k-0613', 'gpt-4',
                'gpt-4-0613', 'gpt-4-1106-preview',
                'gpt-4-turbo-preview', 'gpt-4-0125-preview',
                'gpt-4-turbo-2024-04-09', 'gpt-4-turbo',
                'text-embedding-3-large', 'text-embedding-3-small',
                'text-embedding-ada-002', 'gpt-3.5-turbo-instruct'
            )
        }).required(),
        type: Joi.string().valid('chat', 'embedding','completion').required(),
        prompt : Joi.array().optional(),
        input: Joi.string().optional()
    }).required().or('prompt', 'input'),
    service: Joi.string().valid('openai', 'google').required(),
    apikey: Joi.string().alphanum().required().allow(''),
    org_id: Joi.string().pattern(/^\d+$/).required().allow('124dfgh67ghj').messages({
        'string.pattern.base': 'The input must contain only numeric characters'
    }),
}).when(Joi.object({
    'configuration.model': Joi.string().valid(
        'gpt-3.5-turbo',
        'gpt-3.5-turbo-0613',
        'gpt-3.5-turbo-0125',
        'gpt-3.5-turbo-0301',
        'gpt-3.5-turbo-1106',
        'gpt-3.5-turbo-16k',
        'gpt-3.5-turbo-16k-0613',
        'gpt-4',
        'gpt-4-0613',
        'gpt-4-1106-preview',
        'gpt-4-turbo-preview',
        'gpt-4-0125-preview',
        'gpt-4-turbo-2024-04-09',
        'gpt-4-turbo',
        'text-embedding-3-large',
        'text-embedding-3-small',
        'text-embedding-ada-002',
        'gpt-3.5-turbo-instruct',
        'gemini_pro'
    )
}).unknown(), {
    then: Joi.object({
        configuration: Joi.object({
            // Define validation specific to each model here
            "gpt-3.5-turbo": Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string()
            }),
            "gpt-3.5-turbo-0613": Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
            }),
            'gpt-3.5-turbo-0125': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-3.5-turbo-0301': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-3.5-turbo-1106': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-3.5-turbo-16k': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-3.5-turbo-16k-0613': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-4': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
            }),
            'gpt-4-0613': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
            }),
            'gpt-4-1106-preview': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-4-turbo-preview': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-4-0125-preview': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-4-turbo-2024-04-09': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'gpt-4-turbo': Joi.object({
                "temperature": Joi.string(),
                "max_tokens": Joi.string(),
                "top_p": Joi.string(),
                "logprobs": Joi.string(),
                "frequency_penalty": Joi.string(),
                "presence_penalty": Joi.string(),
                "n": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "tools": Joi.string(),
                "tool_choice": Joi.string(),
                "response_format": Joi.string(),
            }),
            'text-embedding-3-large': Joi.object({
                "encoding_format": Joi.string(),
                "dimensions": Joi.string(),
            }),
            'text-embedding-3-small': Joi.object({
                "encoding_format": Joi.string(),
                "dimensions": Joi.string(),
            }),
            'text-embedding-ada-002': Joi.object({
                "encoding_format": Joi.string(),
                "dimensions": Joi.string(),
            }),
            'gpt-3.5-turbo-instruct': Joi.object({
                "best_of": Joi.string(),
                "echo": Joi.string(),
                "frequency_penalty": Joi.string(),
                "logit_bias": Joi.string(),
                "logprobs": Joi.string(),
                "max_tokens": Joi.string(),
                "n": Joi.string(),
                "presence_penalty": Joi.string(),
                "seed": Joi.string(),
                "stop": Joi.string(),
                "stream": Joi.string(),
                "suffix": Joi.string(),
                "temperature": Joi.string(),
                "top_p": Joi.string(),
            }),
            'gemini_pro': Joi.object({
                "temperature": Joi.string(),
                "topK": Joi.string(),
                "topP": Joi.string(),
                "maxOutputTokens": Joi.string(),
                "stopSequences": Joi.string(),
            }),

        }).unknown() // Allow any additional properties within each model's configuration
    })
});

module.exports = {
    updateBridgeSchema
}